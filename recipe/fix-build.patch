diff --git a/carlsim/kernel/inc/snn.h b/carlsim/kernel/inc/snn.h
index 2eaf715a..b38a829d 100644
--- a/carlsim/kernel/inc/snn.h
+++ b/carlsim/kernel/inc/snn.h
@@ -103,6 +103,7 @@
 #include <cassert>
 #include <cstdio>
 #include <climits>
+#include <sstream>
 
 // experimental
 #include <mutex>

diff --git a/carlsim/testadv/axonplast2.cpp b/carlsim/testadv/axonplast2.cpp
index f876b2c8..5d05f18d 100644
--- a/carlsim/testadv/axonplast2.cpp
+++ b/carlsim/testadv/axonplast2.cpp
@@ -9,6 +9,7 @@
 #include <stopwatch.h>
 #include <periodic_spikegen.h>
 #include <algorithm>
+#include <cmath>
 
 /*
 * V 2: 
@@ -72,7 +73,7 @@ public:
 	}
 
 	int row(int index) {
-		return trunc(index / columns);
+		return std::trunc(index / columns);
 	}
 
 	int column(int index) {
diff --git a/carlsim/kernel/inc/cuda_version_control.h b/carlsim/kernel/inc/cuda_version_control.h
index 647bf385..74c8cd4d 100644
--- a/carlsim/kernel/inc/cuda_version_control.h
+++ b/carlsim/kernel/inc/cuda_version_control.h
@@ -57,12 +57,10 @@
 
 	// we no longer support CUDA3 and CUDA4, but keep cuda_version_control.h for
 	// handling future CUDA toolkit API differences
-	#if defined(__CUDA5__) || defined(__CUDA6__) || defined(__CUDA7__) || defined(__CUDA8__) || defined(__CUDA91__) || defined(__CUDA10__) || defined(__CUDA11__) 
+	#if defined(__CUDA5__) || defined(__CUDA6__) || defined(__CUDA7__) || defined(__CUDA8__) || defined(__CUDA91__) || defined(__CUDA10__) || defined(__CUDA11__)
 
-		#include <helper_cuda.h>
-		#include <helper_functions.h>
-		#include <helper_timer.h>
-		//#include <helper_math.h>
+		#include "helper_cuda.h"
+		#include "helper_timer.h"
 
 		#define CUDA_CREATE_TIMER(x) sdkCreateTimer(&(x))
 		#define CUDA_DELETE_TIMER(x) sdkDeleteTimer(&(x))
diff --git a/carlsim/kernel/inc/snn.h b/carlsim/kernel/inc/snn.h
index 2eaf715a..632606b1 100644
--- a/carlsim/kernel/inc/snn.h
+++ b/carlsim/kernel/inc/snn.h
@@ -1226,7 +1226,7 @@ class SNN {
 	void printEntrails_GPU(int netId, int lGrpIdPre, int lGrpIdPost);
 	void printEntrails_GPU(char* buffer, unsigned length, int netId, int lGrpIdPre, int lGrpIdPost);
 #else	                   
-	bool updateDelays_GPU(int netId, int lGrpIdPre, int lGrpIdPost, std::vector<std::tuple<int, int, uint8_t>> connDelays) { assert(false); }
+	bool updateDelays_GPU(int netId, int lGrpIdPre, int lGrpIdPost, std::vector<std::tuple<int, int, uint8_t>> connDelays) { assert(false); return false; }
 	void printEntrails_GPU(int netId, int lGrpIdPre, int lGrpIdPost) { assert(false); }
 	void printEntrails_GPU(char* buffer, unsigned length, int netId, int lGrpIdPre, int lGrpIdPost) { assert(false); }
 #endif
